import type { Logger } from '@subsquid/logger';
import type { OpenreaderContext } from '@subsquid/openreader/lib/context';
import type { Dialect } from '@subsquid/openreader/lib/dialect';
import type { Query } from '@subsquid/openreader/lib/sql/query';
import type { DataSource, EntityManager } from 'typeorm';
export declare class TypeormOpenreaderContext implements OpenreaderContext {
    readonly dialect: Dialect;
    private connection;
    private subscriptionPollInterval;
    id: number;
    log?: Logger;
    private tx;
    private subscriptionConnection;
    private queryCounter;
    constructor(dialect: Dialect, connection: DataSource, subscriptionConnection?: DataSource, subscriptionPollInterval?: number, log?: Logger);
    executeQuery<T>(query: Query<T>): Promise<T>;
    subscription<T>(query: Query<T>): AsyncIterable<T>;
    getEntityManager(): Promise<EntityManager>;
    close(): Promise<void>;
    private query;
}
//# sourceMappingURL=typeorm.d.ts.map