import { ConstantValidator } from './composite/constant';
import { GetKeyTaggedUnionCast, GetKeyTaggedUnionSrc } from './composite/key-tagged-union';
import { GetPropsCast, GetPropsSrc } from './composite/object';
import { GetOneOfCast, GetOneOfSrc } from './composite/one-of';
import { GetTaggedUnionCast, GetTaggedUnionSrc } from './composite/tagged-union';
import { GetCastType, GetSrcType, Validator } from './interface';
export declare function object<Props extends Record<string, Validator<any> | undefined>>(props: Props): Validator<GetPropsCast<Props>, GetPropsSrc<Props>>;
export declare function record<K extends Validator<string>, V extends Validator<any>>(key: K, value: V): Validator<Record<GetCastType<K>, GetCastType<V>>, Record<GetSrcType<K>, GetSrcType<V>>>;
export declare function taggedUnion<F extends string, U extends Record<string, Validator<any>>>(field: F, variants: U): Validator<GetTaggedUnionCast<F, U>, GetTaggedUnionSrc<F, U>>;
export declare function keyTaggedUnion<U extends Record<string, Validator<any>>>(variants: U): Validator<GetKeyTaggedUnionCast<U>, GetKeyTaggedUnionSrc<U>>;
export declare function array<V extends Validator<any>>(item: V): Validator<GetCastType<V>[], GetSrcType<V>[]>;
export declare function option<V extends Validator<any>>(item: V): Validator<GetCastType<V> | undefined, GetSrcType<V> | undefined | null>;
export declare function nullable<V extends Validator<any>>(item: V): Validator<GetCastType<V> | null, GetSrcType<V> | null>;
export declare function withSentinel<V extends Validator<any>>(label: string, value: GetCastType<V>, validator: V): Validator<GetCastType<V>, GetSrcType<V> | undefined | null>;
export declare function withDefault<V extends Validator<any>>(value: GetCastType<V>, validator: V): Validator<GetCastType<V>, GetSrcType<V> | undefined | null>;
export declare function ref<V extends Validator<any>>(get: () => V): Validator<GetCastType<V>, GetSrcType<V>>;
export declare function oneOf<P extends Record<string, Validator<any>>>(patterns: P): Validator<GetOneOfCast<P>, GetOneOfSrc<P>>;
export declare function constant<const T>(value: T, equals?: (a: unknown, b: T) => boolean): ConstantValidator<T>;
export declare function cast<V extends Validator<any>>(validator: V, value: unknown): GetCastType<V>;
export declare function assertValidity<V extends Validator<any>>(validator: V, value: unknown): asserts value is GetSrcType<V>;
//# sourceMappingURL=dsl.d.ts.map